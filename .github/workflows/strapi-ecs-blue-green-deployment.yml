name: Deploy Strapi to AWS ECS with Blue/Green

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/latest-image-tag.txt'
      - '.github/workflows/ci.yml'
      - '.github/workflows/cd.yml'
      - '.github/workflows/destroy.yml'
      - '.github/workflows/strapi-ecs.yml'
      - '.github/workflows/strapi-ecs-withcloudwatch.yml'

  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build_image.outputs.image }}
      full_image_uri: ${{ steps.build_image.outputs.full_image_uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "full_image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Infrastructure
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      apply_status: ${{ steps.apply.outcome }}
    env:
      TF_VAR_api_token_salt: ${{ secrets.API_TOKEN_SALT }}
      TF_VAR_admin_jwt_secret: ${{ secrets.ADMIN_JWT_SECRET }}
      TF_VAR_transfer_token_salt: ${{ secrets.TRANSFER_TOKEN_SALT }}
      TF_VAR_app_keys: ${{ secrets.APP_KEYS }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.3

    - name: Terraform Init
      id: init
      working-directory: ./Terraform-blue-green-deployment
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      id: plan
      working-directory: ./Terraform-blue-green-deployment
      run: terraform plan -out=tfplan 
      env:
        TF_VAR_ecr_repo_name: ${{ secrets.ECR_REPOSITORY_NAME }}
        TF_VAR_image_tag: ${{ github.sha }}

    - name: Terraform Apply
      id: apply
      working-directory: ./Terraform-blue-green-deployment
      run: |
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_ecr_repo_name: ${{ secrets.ECR_REPOSITORY_NAME }}
        TF_VAR_image_tag: ${{ github.sha }}

  deploy_new_version:
    name: Deploy New Version with Blue/Green
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    if: needs.deploy.outputs.apply_status == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Register new task definition for CodeDeploy
      id: register_task_def
      run: |
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_NAME }} --query 'taskDefinition' --output json)
        IMAGE="${{ needs.prepare.outputs.full_image_uri }}"
        echo "Using Docker image: '$IMAGE'"

        # Update the task definition with the new image
        TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE" '.containerDefinitions[0].image = $IMAGE')        
        TASK_DEFINITION=$(echo $TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')        
        NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION")        
        NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
        echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Create appspec.json file
      id: create_appspec
      env:
        NEW_TASK_DEF_ARN: ${{ steps.register_task_def.outputs.task_definition_arn }}
      run: |
        echo '{
          "version": 0.0,
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "'"$NEW_TASK_DEF_ARN"'",
                  "LoadBalancerInfo": {
                    "ContainerName": "strapi-app",
                    "ContainerPort": 1337
                  },
                  "PlatformVersion": "LATEST"
                }
              }
            }
          ]
        }' > appspec.json

    - name: Upload AppSpec to S3
      run: |
        aws s3 cp appspec.json s3://${{ secrets.S3_BUCKET_NAME }}/appspec.json

    - name: Trigger CodeDeploy Deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
          --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=JSON,key=appspec.json \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --file-exists-behavior OVERWRITE \
          --query 'deploymentId' --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

    - name: Wait for deployment to complete
      env:
        DEPLOYMENT_ID: ${{ steps.trigger_codedeploy.outputs.deployment_id }}
      run: |
        echo "Waiting for deployment to complete..."
        
        while true; do
          STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
          echo "Current deployment status: $STATUS"
          if [ "$STATUS" == "Succeeded" ]; then
            echo "Deployment completed successfully!"
            break
          elif [ "$STATUS" == "Failed" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
          sleep 30
        done