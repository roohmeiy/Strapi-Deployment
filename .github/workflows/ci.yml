name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
      - 'README.md'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    outputs:
      image_tag: ${{ steps.build_tag.outputs.image_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Generate unique image tag
        id: build_tag
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)-$(date +%s)
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${IMAGE_TAG}"
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" -t "$ECR_REGISTRY/$ECR_REPOSITORY:latest" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      # Save the image tag to a repository variable
      - name: Save image tag to GitHub output
        uses: gliech/create-github-secret-action@v1
        with:
          name: LATEST_IMAGE_TAG
          value: ${{ steps.build_tag.outputs.image_tag }}
          pa_token: ${{ secrets.PAT_TOKEN }} 

