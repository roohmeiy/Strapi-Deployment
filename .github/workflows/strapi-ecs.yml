name: Deploy Strapi to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ensure_ecr:
    name: Ensure ECR Repository Exists
    runs-on: ubuntu-latest
    outputs:
      repository_url: ${{ steps.ecr_output.outputs.repository_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.3

    - name: Terraform Init ECR Module
      working-directory: ./Terraform-ecs-cicd/ecr
      run: terraform init

    # Apply only the ECR module first to ensure the repository exists
    - name: Get ECR Repository URL
      id: ecr_output
      working-directory: ./Terraform-ecs-cicd/ecr
      run: |
        # Use data source to fetch existing repo rather than trying to create a new one
        terraform apply -auto-approve -var="ecr_repo_name=${{ secrets.ECR_REPOSITORY_NAME }}" -var="create_repository=false"
        # Get the repository URL from terraform output
        REPO_URL=$(terraform output -raw repository_url || terraform output repository_url | tr -d '"')
        echo "Retrieved repository URL: $REPO_URL"
        echo "repository_url=$REPO_URL" >> $GITHUB_OUTPUT

  build_push:
    name: Build and Push Docker Image
    needs: ensure_ecr
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR with SHA tag only
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy Infrastructure
    needs: [ensure_ecr, build_push]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.3

    - name: Terraform Init
      working-directory: ./Terraform-ecs-cicd
      run: terraform init

    - name: Terraform Plan
      working-directory: ./Terraform-ecs-cicd
      run: terraform plan -out=tfplan \
        -var="ecr_repo_name=${{ secrets.ECR_REPOSITORY_NAME }}" \
        -var="image_tag=${{ github.sha }}" \
        -var="vpc_name=${{ secrets.VPC_NAME }}" \
        -var="igw_name=${{ secrets.IGW_NAME }}" \
        -var="security_group_name=${{ secrets.SECURITY_GROUP_NAME }}" \
        -var="ecs_cluster_name=${{ secrets.ECS_CLUSTER_NAME }}" \
        -var="task_definition_name=${{ secrets.TASK_DEFINITION_NAME }}" \
        -var="ecs_service_name=${{ secrets.ECS_SERVICE_NAME }}" \
        -var="alb_name=${{ secrets.ALB_NAME }}" \
        -var="target_group_name=${{ secrets.TARGET_GROUP_NAME }}" \
        -var="api_token_salt=${{ secrets.API_TOKEN_SALT }}" \
        -var="admin_jwt_secret=${{ secrets.ADMIN_JWT_SECRET }}" \
        -var="transfer_token_salt=${{ secrets.TRANSFER_TOKEN_SALT }}" \
        -var="app_keys=${{ secrets.APP_KEYS }}" \
        -var="aws_region=${{ secrets.AWS_REGION }}"

    - name: Terraform Apply
      working-directory: ./Terraform-ecs-cicd
      run: terraform apply -auto-approve tfplan
      continue-on-error: true

    - name: Force new deployment
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment